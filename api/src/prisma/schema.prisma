// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  email         String     @unique
  password      String
  avatar        String?
  first_name    String?
  last_name     String?
  emailToken    String?    @unique
  isVerified    Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  articles      Article[]  @relation("UserArticles")
  favorites     Article[]  @relation("UserFavorites")
  followedBy    User[]     @relation("UserFollows")
  following     User[]     @relation("UserFollows")
  Comment       Comment[]
  Post          Post[]
  savedUserPost UserPost[]
}

model Article {
  id          Int       @id @default(autoincrement())
  slug        String    @unique
  title       String
  description String
  body        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  tagList     Tag[]
  author      User      @relation("UserArticles", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  favoritedBy User[]    @relation("UserFavorites")
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]
}

model Post {
  id            Int         @id @default(autoincrement())
  title         String
  price         Int
  images        String[]
  address       String
  city          String
  bedroom       Int
  bathroom      Int
  latitude      String
  longitude     String
  type          Type
  property      Property
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  postDetail    PostDetail?
  savedUserPost UserPost[]
}

model PostDetail {
  id         Int     @id @default(autoincrement())
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     Int     @unique
}

model UserPost {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, postId])
}
